import java.util.Arrays;

public class ShortestPath {
	static int V=9;
	public static int minDistance(int[]dist,Boolean[]sptSet) {
		int min=Integer.MAX_VALUE;
		int min_index=0;
		for(int i=0;i<V;i++) {
			if(dist[i]<min && sptSet[i]==false) {
				min=dist[i];
				min_index=i;
			}
		}
		return min_index;
	}
	public static int[] dijkstra(int [][]graph,int src) {
		int dist[]=new int[V];
		Boolean sptSet[]= new Boolean[V];
		
		for(int i=0;i<V;i++) {
			dist[i]=Integer.MAX_VALUE;
			sptSet[i]=false;
		}
		
		dist[src]=0;
		for(int y=0;y<V;y++) {
			int u=minDistance(dist,sptSet);
			sptSet[u]=true;
			
			for(int i=0;i<V;i++) {
				if(sptSet[i]==false && graph[i][u]!=0 && dist[u]+graph[u][i]<dist[i]) {
					dist[i]=dist[u]+graph[u][i];
				}
			}
		}
		return dist;
	}
	
	public static void main(String[] args) {
		   int graph[][] = new int[][] {   { 0, 4 , 0, 0 , 0 , 0 , 0, 8 , 0 }, 
				   						   { 4, 0 , 8, 0 , 0 , 0 , 0, 11, 0 }, 
							               { 0, 8 , 0, 7 , 0 , 4 , 0, 0 , 2 }, 
							               { 0, 0 , 7, 0 , 9 , 14, 0, 0 , 0 }, 
							               { 0, 0 , 0, 9 , 0 , 10, 0, 0 , 0 }, 
							               { 0, 0 , 4, 14, 10, 0 , 2, 0 , 0 }, 
							               { 0, 0 , 0, 0 , 0 , 2 , 0, 1 , 6 }, 
							               { 8, 11, 0, 0 , 0 , 0 , 1, 0 , 7 }, 
							               { 0, 0 , 2, 0 , 0 , 0 , 6, 7 , 0 } }; 
			int[]dist=ShortestPath.dijkstra(graph,0);		
			System.out.println(Arrays.toString(dist));
							               
	}

}
